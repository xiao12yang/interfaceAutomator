{"name": "货主下订单成功", "status": "failed", "statusDetails": {"message": "AssertionError: 测试失败", "trace": "self = <test_createOrder.TestCreateOrder object at 0x00000145B3FC80E0>\nbase_info = {'api_name': '货主下订单', 'cookies': '${get_extract_data(cookies)}', 'headers': '${get_headers(json)}', 'method': 'post', ...}\ntest_case = {'case_name': '货主下订单成功', 'extract': {'orderNo': '\"orderNo\":\"(.+?)\"'}, 'json': {'orderBoxList': [], 'orderCapacityList'...: '总仓', 'orderMark': '货主下单', ...}, 'orderVehicleList': []}, 'validation': [{'eq': {'message': '操作成功'}}, {'code': 200}]}\n\n    @pytest.mark.parametrize('base_info,test_case',read_yaml('./data/createOrder.yaml'))\n    def test_create_order(self, base_info,test_case):\n        allure.dynamic.title(test_case['case_name'])\n>       req.execute_test_case(base_info, test_case)\n\ntestcases\\createOrder\\test_createOrder.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nunit_tools\\apiutils_single.py:147: in execute_test_case\n    raise e\nunit_tools\\apiutils_single.py:144: in execute_test_case\n    self.asserts.assert_result(validation,response.json(),status_code)\nunit_tools\\assertion_utils.py:195: in assert_result\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'unit_tools.assertion_utils.Assertions'>\nexpected_result = [{'eq': {'message': '操作成功'}}, {'code': 200}]\nresponse = {'msg': '未携带cookie信息'}, status_code = 200\n\n    @classmethod\n    def assert_result(cls, expected_result, response, status_code):\n        \"\"\"\n        断言主函数，通过all_flag == 0 表示测试成功，否则失败\n        :param expected_result: （list）yaml文件validation关键词下的预期结果\n        :param response: (dict)接口的实际响应信息\n        :param status_code: 接口的实际响应状态码\n        :return:\n        \"\"\"\n        all_flag = 0\n        assert_methods = {\n            'code': cls.status_code_assert,\n            'contain': cls.contain_assert,\n            'eq': cls.equal_assert,\n            'ne': cls.not_equal_assert,\n            'db': cls.database_assert,\n        }\n        try:\n            for yq in expected_result:\n                for assert_mode, assert_value in yq.items():\n                    assert_method: Callable[[Any, Any], int] = assert_methods.get(assert_mode)\n                    if assert_mode:\n                        if assert_mode in ['code', 'db']:\n                            flag = assert_method(assert_value, status_code)\n                        else:\n                            flag = assert_method(assert_value, response)\n                        all_flag += flag\n                    else:\n                        logs.error(f'不支持该{assert_mode}断言模式')\n                        # raise AssertionError(f'不支持该{assert_mode}断言模式')\n    \n        except Exception as e:\n            logs.error(f\"断言发生未知异常，原因：{e}\")\n        try:\n>           assert all_flag == 0, '测试失败'\n                   ^^^^^^^^^^^^^\nE           AssertionError: 测试失败\n\nunit_tools\\assertion_utils.py:191: AssertionError"}, "attachments": [{"name": "接口名称：货主下订单", "source": "dc88f73a-7528-41a2-8e91-e3855043c818-attachment.txt", "type": "text/plain"}, {"name": "接口地址：http://127.0.0.1:8787/api/order/customer/orderPlan/create", "source": "83984340-c180-4f0f-a961-76c746ac6c5e-attachment.txt", "type": "text/plain"}, {"name": "请求方式：post", "source": "7f891e98-5fa5-4d87-9573-73b7e2b41665-attachment.txt", "type": "text/plain"}, {"name": "请求头：{'Content-Type': 'application/json;charset=UTF-8'}", "source": "01b8568b-f8bb-464d-8518-a069dc680ce5-attachment.txt", "type": "text/plain"}, {"name": "Cookie：None", "source": "2e409a52-2686-4509-b5d4-2408c4f93910-attachment.txt", "type": "text/plain"}, {"name": "测试用例名称：货主下订单成功", "source": "7e131093-e125-4d2f-9130-96a79195ada6-attachment.txt", "type": "text/plain"}, {"name": "参数类型：json", "source": "b54d83e1-4405-4621-9b10-db061be20229-attachment.txt", "type": "text/plain"}, {"name": "接口实际返回信息", "source": "859f784c-8b4b-466d-a8f0-15f00f0d6d77-attachment.txt", "type": "text/plain"}, {"name": "相等断言：失败", "source": "67425769-e77d-4099-9f4c-cf6827ccacb1-attachment.txt", "type": "text/plain"}, {"name": "状态码断言：成功", "source": "7d78ebd5-4a4f-4f68-9ba5-30f3de648aab-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "6b961542-3418-4769-b6ad-189e1c05998f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "base_info", "value": "{'api_name': '货主下订单', 'url': '/api/order/customer/orderPlan/create', 'method': 'post', 'headers': '${get_headers(json)}', 'cookies': '${get_extract_data(cookies)}'}", "mode": "hidden"}, {"name": "test_case", "value": "{'case_name': '货主下订单成功', 'json': {'orderInfo': {'template': 'define', 'urgentType': 2, 'cusName': '总仓', 'orderType': 1, 'charter': 2, 'planType': 1, 'transStartTime': '2023-07-14 10:37:02', 'transEndTime': '2023-07-16 10:38:58', 'orderMark': '货主下单', 'cusId': '1661242770195464193'}, 'orderCapacityList': [{'materialCategoryId': '1676511586856882178', 'materialCategory': '粮食', 'materialName': '小麦', 'materialUnit': 'KG', 'materialUnitId': '1660891402561581058', 'settlementUnit': 'KG', 'syncMaterialId': '4', 'billingWeightCoe': None, 'billingVolumeCoe': None, 'sendWeightCoe': None, 'sendVolumeCoe': None, 'materialSpecList': None, 'materialId': '1661349087048306690', 'sendCusId': '1661663745663741954', 'sendCusName': '码头尖庄仓', 'receiveCusId': '1661624733406285825', 'receiveCusName': '502 车间', 'sendAdrId': '1674617286107828226', 'sendAdrName': '长宁县五谷粮食购销有限责任公司', 'sendPoiId': '1674615819826425857', 'sendAdrDetail': None, 'receiveAdrId': '1674208708683337730', 'receiveAdrName': '五区一区', 'receivePoiId': '1674208399908237313', 'receiveAdrDetail': '五区一区', 'materialSpecId': '1661349088147214337', 'specName': '1', 'materialNum': 100, 'materialSpecUnit': 'KG', 'remark': '原粮'}], 'orderVehicleList': [], 'orderBoxList': []}, 'validation': [{'eq': {'message': '操作成功'}}, {'code': 200}], 'extract': {'orderNo': '\"orderNo\":\"(.+?)\"'}}", "mode": "hidden"}], "start": 1758997348655, "stop": 1758997348668, "uuid": "93270c78-c332-4cb6-b423-2ba34fea6f66", "historyId": "9ef44265908be4dbbf7107f18227e9a0", "testCaseId": "cc41439750651515789b0cae96a9256c", "fullName": "testcases.createOrder.test_createOrder.TestCreateOrder#test_create_order", "labels": [{"name": "feature", "value": "订单管理模块"}, {"name": "parentSuite", "value": "testcases.createOrder"}, {"name": "suite", "value": "test_createOrder"}, {"name": "subSuite", "value": "TestCreateOrder"}, {"name": "host", "value": "xiaoyang"}, {"name": "thread", "value": "18492-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.createOrder.test_createOrder"}], "titlePath": ["testcases", "createOrder", "test_createOrder.py", "TestCreateOrder"]}